<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Omina</title>
    <link>https://everythingisnothing.github.io/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Omina</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sat, 17 Nov 2018 08:07:59 +0800</lastBuildDate>
    
	<atom:link href="https://everythingisnothing.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端养成记(1) 食用webpack</title>
      <link>https://everythingisnothing.github.io/blog/2018-11/%E5%89%8D%E7%AB%AF%E5%85%BB%E6%88%90%E8%AE%B01-%E9%A3%9F%E7%94%A8webpack/</link>
      <pubDate>Sat, 17 Nov 2018 08:07:59 +0800</pubDate>
      
      <guid>https://everythingisnothing.github.io/blog/2018-11/%E5%89%8D%E7%AB%AF%E5%85%BB%E6%88%90%E8%AE%B01-%E9%A3%9F%E7%94%A8webpack/</guid>
      <description>预先善其事，必先利其器，webpack是前端利器，学好它，可以在野生状态更好的放养。 安装webpack 首先创建项目目录 mkdir webpack-demo &amp;amp;&amp;amp; cd webpack-demo 初始化配置 npm init -y 安装本项目的webpack 和webpack-cli npm install webpack webpack-cli --save-dev 创建目录结构 webpack-demo |- package.json |- webpack.config.js |- /dist |- index.html |- /src |- index.js 安装插件 html页面插件 npm install html-webpack-plugin --save-dev 将js、css等内嵌网页的插件 npm install html-webpack-inline-source-plugin --save-dev 自动打开游览器的插件 npm install open-browser-webpack-plugin --save-dev 在js文件中引入css的插件 npm install --save-dev style-loader css-loader 配置webpack 在p</description>
    </item>
    
    <item>
      <title>前端养成记(2) 食用CSS3动画</title>
      <link>https://everythingisnothing.github.io/blog/2018-11/%E5%89%8D%E7%AB%AF%E5%85%BB%E6%88%90%E8%AE%B02-%E9%A3%9F%E7%94%A8css3%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Sat, 17 Nov 2018 08:07:59 +0800</pubDate>
      
      <guid>https://everythingisnothing.github.io/blog/2018-11/%E5%89%8D%E7%AB%AF%E5%85%BB%E6%88%90%E8%AE%B02-%E9%A3%9F%E7%94%A8css3%E5%8A%A8%E7%94%BB/</guid>
      <description>要创建CSS3动画，你将不得不了解@keyframes规则。 @keyframes规则是创建动画。 @keyframes规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。 CSS3 动画 用 @keyframes 创建动画 @keyframes ianimation { 0% {background: red;} 25% {background: yellow;} 50% {background: blue;} 100% {background: green;} } 选择一个元素 div{ width: 500px; height: 800px; border: solid 1px #fff; } 把它绑定到一个选择器 div { animation-name: ianimation;/* 动画的名称 */ animation-duration: 5s;/* 动画完成一个周期所花费的秒或毫秒 */ animation-timing-function: linear;/* 动画的速度 */ animation-delay: 2s;/* 动画何时开始 */ animation-iteration-count: infinite;/* 动画被播放的次数。默认</description>
    </item>
    
    <item>
      <title>Blog养成记(14) 让同页滚动更平滑</title>
      <link>https://everythingisnothing.github.io/blog/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B014-%E8%AE%A9%E5%90%8C%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%9B%B4%E5%B9%B3%E6%BB%91/</link>
      <pubDate>Sat, 18 Aug 2018 20:14:59 +0800</pubDate>
      
      <guid>https://everythingisnothing.github.io/blog/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B014-%E8%AE%A9%E5%90%8C%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%9B%B4%E5%B9%B3%E6%BB%91/</guid>
      <description>&lt;p&gt;上一期说到增加toc侧边栏，但是直接跳转非常突兀，因此特地找了让同页跳转滚动更平滑的插件。
&amp;lt;code&amp;gt;&lt;/p&gt;

&lt;h2 id=&#34;配置smooth-scroll插件&#34;&gt;配置smooth-scroll插件&lt;/h2&gt;

&lt;p&gt;首先&lt;a href=&#34;https://github.com/kswedberg/jquery-smooth-scroll/releases&#34;&gt;下载smooth-scroll插件&lt;/a&gt;，将其中&lt;code&gt;jquery.smooth-scroll.js&lt;/code&gt;放入&lt;code&gt;js&lt;/code&gt;文件夹中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog养成记(11) 给网站加个小icon</title>
      <link>https://everythingisnothing.github.io/blog/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B011-%E7%BB%99%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%AA%E5%B0%8Ficon/</link>
      <pubDate>Mon, 13 Aug 2018 00:14:19 +0800</pubDate>
      
      <guid>https://everythingisnothing.github.io/blog/2018-08/blog%E5%85%BB%E6%88%90%E8%AE%B011-%E7%BB%99%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%AA%E5%B0%8Ficon/</guid>
      <description>这部分其实很简单，只需要在index.html的&amp;lt;head&amp;gt;部分增加以下一句话就好： &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; href=&amp;quot;/img/aviconfile.ico&amp;quot; &amp;gt; 不过，既然是要做主题，肯定是要用模板变量的么。因此，在模板中的增加以下内容： &amp;lt;!-- Icon --&amp;gt; &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; {{ if .Site.Params.faviconfile }} href=&amp;quot;/{{ .Site.Params.faviconfile }}&amp;quot; {{ else if.Site.Params.avatar}} href=&amp;quot;/{{ .Site.Params.avatar }}&amp;quot; {{ end }} &amp;gt; 其中faviconfile是在config.toml中定义的网站图标的路径，avatar是在其中定义的个人头像照片的路径。这句话就是如果定义了网站图标就使用网站图标，如果不</description>
    </item>
    
    <item>
      <title>前端试水(2) 使用docker镜像的Sass配置</title>
      <link>https://everythingisnothing.github.io/blog/2018-08/%E5%89%8D%E7%AB%AF%E8%AF%95%E6%B0%B42-%E4%BD%BF%E7%94%A8docker%E9%95%9C%E5%83%8F%E7%9A%84sass%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 02 Aug 2018 15:49:22 +0800</pubDate>
      
      <guid>https://everythingisnothing.github.io/blog/2018-08/%E5%89%8D%E7%AB%AF%E8%AF%95%E6%B0%B42-%E4%BD%BF%E7%94%A8docker%E9%95%9C%E5%83%8F%E7%9A%84sass%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 半年前，由于终于将博客主题初版设计出来准备开始实施，在less和sass中纠结良久选择了sass。为了保持环境纯净性，想用docker装sass，用node-sass，试了几次中间都失败，无奈放弃。几乎半年后的今天，莫名又开始有搭建网页的欲望，于是又开始折腾。不过这次运气不错，终于折腾成功。 Sass是什么 Sass 是一个 css的预编译器。它在css语法的基础上，引入了更多的变量、规则等功能，可以帮助c</description>
    </item>
    
    <item>
      <title>前端试水(1) 前端技术路线</title>
      <link>https://everythingisnothing.github.io/blog/2018-08/%E5%89%8D%E7%AB%AF%E8%AF%95%E6%B0%B41-%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Wed, 01 Aug 2018 10:23:48 +0800</pubDate>
      
      <guid>https://everythingisnothing.github.io/blog/2018-08/%E5%89%8D%E7%AB%AF%E8%AF%95%E6%B0%B41-%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/</guid>
      <description>前言 对于前端的了解欲望实际上是从想对博客主题进行修改开始的。但是前端这部分一直对我来说是个谜，虽然这些名词都能搜索到，但一直傻傻的不得其门而入。总算在一年后的今天，尽管还有很多地方暂时是迷雾状态，但貌似略了解一点前端的整体框架。现在算是开了新的一个系列，在此算是记录一下我了解的前端的技术路线，如果那些和我一样的前端小白们能通过这个也大概了解一点到底现在需要学的、用的是什么，就再好不过了。 对了，先声</description>
    </item>
    
  </channel>
</rss>